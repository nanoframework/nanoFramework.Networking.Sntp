trigger:
  paths:
    exclude: 
    - "doc"
    - "*.md"
    - ".appveyor.yml"

# add nf-tools repo to resources (for Azure Pipelines templates)
resources:
  repositories:
    - repository: templates
      type: github
      name: nanoframework/nf-tools
      endpoint: nfbot
pool:
  vmImage: 'VS2017-Win2016'

variables:
  solution: '**/source/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  nugetPackageName: 'nanoFramework.Networking.Sntp'

steps:

# need this here in order to persist GitHub credentials 
- checkout: self
  persistCredentials: true

- script: |
    git config --global user.email "nfbot@users.noreply.github.com"
    git config --global user.name "nfbot"
  displayName: Setup git identity

- task: NuGetToolInstaller@0

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'
    feedsToUse: config
    nugetConfigPath: source/NuGet.config

- task: InstallnFBuildComponents@1
  displayName: Install nanoFramework MSBuild components

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# we don't have tests (yet)
# - task: VSTest@2
#   inputs:
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'

- task: PowerShell@2
  inputs:
      targetType: 'inline'
      script: |
          $MyNuGetVersion = $env:NBGV_NuGetPackageVersion -replace "\-g$env:NBGV_GitCommitIdShort", " "

          # replace preview with alpha if this is a PR build
          if($env:Build_Reason -eq 'PullRequest')
          {
            $MyNuGetVersion = $MyNuGetVersion -replace "preview", "alpha"
          }

          Write-Host "NuGet build number is $MyNuGetVersion"

          Write-Host "$("##vso[task.setvariable variable=MY_NUGET_VERSION]")$MyNuGetVersion"
  condition: succeeded()
  displayName: Get NuGet build number

- task: UseRubyVersion@0
  inputs:
    versionSpec: '>= 2.4' 
    addToPath: true
  condition: and( succeeded(), ne(variables['Build.Reason'], 'PullRequest') )
  displayName: Setup Ruby

# generate change log including future version
- powershell: |
      gem install github_changelog_generator --quiet --no-ri --no-rdoc
      # need to call it passing both cache options with full path otherwise it won't work
      github_changelog_generator --token $(GitHubToken) --cache-log  $env:AGENT_TEMPDIRECTORY\github-changelog-logger.log --cache-file $env:AGENT_TEMPDIRECTORY\github-changelog-http-cache
  condition: and( succeeded(), ne(variables['Build.Reason'], 'PullRequest'), or( eq(variables['Build.SourceBranchName'], 'master'), contains(variables['Build.SourceBranchName'], 'release') ) )
  displayName: Generate change log

# generate change log including future version
- powershell: |
      gem install github_changelog_generator --quiet --no-ri --no-rdoc
      # need to call it passing both cache options with full path otherwise it won't work
      github_changelog_generator --token $(GitHubToken) --cache-log  $env:AGENT_TEMPDIRECTORY\github-changelog-logger.log --cache-file $env:AGENT_TEMPDIRECTORY\github-changelog-http-cache --future-release v$env:MY_NUGET_VERSION
  condition: and( succeeded(), ne(variables['Build.Reason'], 'PullRequest'), not( or( eq(variables['Build.SourceBranchName'], 'master'), contains(variables['Build.SourceBranchName'], 'release') ) ) )
  displayName: Generate change log

# copy change log to artifacts directory
- task: CopyFiles@2
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)'
    Contents: 'CHANGELOG.md'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
  condition: and( succeeded(), ne(variables['Build.Reason'], 'PullRequest') )
  displayName: Copy Changelog

# push new changelog to GitHub repo
- powershell: |
      git add CHANGELOG.md
      git commit -m "Update CHANGELOG for v$env:NBGV_Version"
      # need to wrap the git command bellow so it doesn't throw an error because of redirecting the output to stderr
      git push origin "HEAD:$env:Build_SourceBranchName" --porcelain
  condition: and( succeeded(), ne(variables['Build.Reason'], 'PullRequest'), not( contains(variables['Build.SourceBranchName'], 'tags') ) )
  displayName: Push changelog to GitHub

# update could build number (only possible if this is not a PR from a fork)
- task: PowerShell@2
  inputs:
      targetType: 'inline'
      script: Write-Host "$("##vso[build.updatebuildnumber]")$env:NBGV_NuGetPackageVersion"
  condition: and( succeeded(), ne(variables['system.pullrequest.isfork'], true) )
  displayName: Update cloud build number

- task: NuGetCommand@2
  inputs:
    command: 'custom' 
    arguments: 'pack source\$(nugetPackageName).nuspec -Version $(MY_NUGET_VERSION) -Symbols'
  condition: succeeded()
  displayName: Pack NuGet with class library

# - task: NuGetCommand@2
#   inputs:
#     command: 'custom' 
#     arguments: 'pack source\$(nugetPackageName).DELIVERABLES.nuspec -Version $(MY_NUGET_VERSION) -Symbols'
#     displayName: Pack NuGet with build deliverables class library

- task: CopyFiles@1
  inputs:
    sourceFolder: $(Build.SourcesDirectory)
    Contents: |
      **\$(nugetPackageName)*.nupkg
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    flattenFolders: true
  condition: succeeded()
  displayName: Collecting deployable artifacts

# publish artifacts (only possible if this is not a PR originated on a fork)
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: deployables
    ArtifactType: Container
  condition: and( succeeded(), ne(variables['system.pullrequest.isfork'], true) )
  displayName: Publish deployables artifacts

# push NuGet packages to MyGet feed (always happens except on PR builds)
- task: NuGetCommand@2
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg;!$(Build.ArtifactStagingDirectory)/*.symbols.nupkg'
    publishFeedCredentials: 'MyGet'
  condition: succeeded()
  displayName: Push NuGet packages to MyGet

# push NuGet class lib package to NuGet (happens on tag builds for any branch)
- task: NuGetCommand@2
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(Build.ArtifactStagingDirectory)/$(nugetPackageName).nupkg;!$(Build.ArtifactStagingDirectory)/$(nugetPackageName).symbols.nupkg'
    publishFeedCredentials: 'NuGet'
  condition: and( succeeded(), ne(variables['Build.Reason'], 'PullRequest'), contains(variables['Build.SourceBranchName'], 'tags') )
  displayName: Push NuGet packages to NuGet

# step from template @ nf-tools repo
# update assembly declaration in nf-interpreter
- template: azure-pipelines-templates/update-assembly-declarations.yml@templates  

# step from template @ nf-tools repo
- template: azure-pipelines-templates/discord-webhook-task.yml@templates  
